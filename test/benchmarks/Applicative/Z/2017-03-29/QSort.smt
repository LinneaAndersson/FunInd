("1566.980731s",[Lemma {lemmaName = "lemma118", lemmaSource = Nothing, hLemmas = ["lemma118","Sort.prop_countcount"], indVar = Nothing, formula = "\n  ((count x y) P.+ (count x z)) === (count x (y ++ z))"},Lemma {lemmaName = "lemma99", lemmaSource = Nothing, hLemmas = ["lemma99","Sort.prop_QSortCount"], indVar = Nothing, formula = " (count x (qsort y)) === (count x y)"},Lemma {lemmaName = "lemma97", lemmaSource = Nothing, hLemmas = ["lemma97"], indVar = Nothing, formula = "\n  (smallerEq (nil :: list P.Int) x) ===\n    (ordered (nil :: list P.Int))"},Lemma {lemmaName = "lemma96", lemmaSource = Nothing, hLemmas = ["lemma96"], indVar = Nothing, formula = "\n  (smallerEq (cons (0) x) (y P.+ y)) ===\n    (smallerEq (cons y x) (y P.+ y))"},Lemma {lemmaName = "lemma95", lemmaSource = Nothing, hLemmas = ["lemma95"], indVar = Nothing, formula = "\n  (smallerEq (cons y (cons x z)) x2) ===\n    (smallerEq (cons x (cons y z)) x2)"},Lemma {lemmaName = "lemma94", lemmaSource = Nothing, hLemmas = ["lemma94"], indVar = Nothing, formula = "\n  (smallerEq (cons (0) (nil :: list P.Int)) (x P.+ x)) ===\n    (smallerEq (cons (0) (nil :: list P.Int)) x)"},Lemma {lemmaName = "lemma93", lemmaSource = Nothing, hLemmas = ["lemma93"], indVar = Nothing, formula = "\n  (smallerEq (cons (y P.+ x) (nil :: list P.Int)) x) ===\n    (smallerEq (cons y (nil :: list P.Int)) (0))"},Lemma {lemmaName = "lemma92", lemmaSource = Nothing, hLemmas = ["lemma89","lemma92"], indVar = Nothing, formula = "\n  (smallerEq (cons (x P.+ x) y) (0)) ===\n    (smallerEq (cons x (cons x y)) (0))"},Lemma {lemmaName = "lemma91", lemmaSource = Nothing, hLemmas = ["lemma91"], indVar = Nothing, formula = "\n  (smallerEq (cons x (nil :: list P.Int)) (y P.+ x)) ===\n    (smallerEq (cons (0) (nil :: list P.Int)) y)"},Lemma {lemmaName = "lemma90", lemmaSource = Nothing, hLemmas = ["lemma88","lemma90"], indVar = Nothing, formula = "\n  (smallerEq (cons x (cons z y)) z) === (smallerEq (cons x y) z)"},Lemma {lemmaName = "lemma89", lemmaSource = Nothing, hLemmas = ["lemma89"], indVar = Nothing, formula = "\n  (smallerEq (cons x (cons x y)) z) === (smallerEq (cons x y) z)"},Lemma {lemmaName = "lemma88", lemmaSource = Nothing, hLemmas = ["lemma88"], indVar = Nothing, formula = " (smallerEq (cons y x) y) === (smallerEq x y)"},Lemma {lemmaName = "lemma87", lemmaSource = Nothing, hLemmas = ["lemma87"], indVar = Nothing, formula = "\n  (smallerEq (nil :: list P.Int) (0)) ===\n    (smallerEq (nil :: list P.Int) x)"},Lemma {lemmaName = "lemma86", lemmaSource = Nothing, hLemmas = ["lemma86"], indVar = Nothing, formula = "\n  (ordered (cons x (cons x y))) === (ordered (cons x y))"},Lemma {lemmaName = "lemma85", lemmaSource = Nothing, hLemmas = ["lemma85"], indVar = Nothing, formula = "\n  (ordered (cons x (nil :: list P.Int))) ===\n    (ordered (nil :: list P.Int))"},Lemma {lemmaName = "lemma72", lemmaSource = Nothing, hLemmas = [], indVar = Just [1], formula = " (filterGT x (filterLEq x y)) === (nil :: list P.Int)"},Lemma {lemmaName = "lemma71", lemmaSource = Nothing, hLemmas = ["lemma71"], indVar = Nothing, formula = "\n  (qsort (cons x (nil :: list P.Int))) ===\n    (cons x (nil :: list P.Int))"},Lemma {lemmaName = "lemma67", lemmaSource = Nothing, hLemmas = ["lemma67"], indVar = Nothing, formula = " (qsort (nil :: list P.Int)) === (nil :: list P.Int)"},Lemma {lemmaName = "lemma66", lemmaSource = Nothing, hLemmas = ["lemma66"], indVar = Nothing, formula = "\n  (filterLEq (0) (cons (x P.+ x) (nil :: list P.Int))) ===\n    (filterLEq x (cons (x P.+ x) (nil :: list P.Int)))"},Lemma {lemmaName = "lemma65", lemmaSource = Nothing, hLemmas = ["lemma65","lemma60"], indVar = Nothing, formula = "\n  (filterLEq y (filterLEq x (cons y z))) ===\n    (filterLEq x (cons y (filterLEq y z)))"},Lemma {lemmaName = "lemma64", lemmaSource = Nothing, hLemmas = ["lemma64"], indVar = Nothing, formula = "\n  (filterLEq (x P.+ x) (cons (0) (nil :: list P.Int))) ===\n    (filterLEq x (cons (0) (nil :: list P.Int)))"},Lemma {lemmaName = "lemma63", lemmaSource = Nothing, hLemmas = ["lemma63"], indVar = Nothing, formula = "\n  (filterLEq x (filterLEq y (cons y z))) ===\n    (filterLEq x (cons y (filterLEq y z)))"},Lemma {lemmaName = "lemma62", lemmaSource = Nothing, hLemmas = ["lemma62"], indVar = Nothing, formula = "\n  (filterLEq x (filterLEq y (cons y z))) ===\n    (filterLEq x (cons y (filterLEq y z)))"},Lemma {lemmaName = "lemma61", lemmaSource = Nothing, hLemmas = ["lemma61","lemma59"], indVar = Nothing, formula = "\n  (filterLEq x (cons y (filterLEq x z))) ===\n    (filterLEq x (cons y z))"},Lemma {lemmaName = "lemma60", lemmaSource = Nothing, hLemmas = [], indVar = Just [1], formula = "\n  (filterLEq y (filterLEq x z)) === (filterLEq x (filterLEq y z))"},Lemma {lemmaName = "lemma59", lemmaSource = Nothing, hLemmas = [], indVar = Just [1], formula = " (filterLEq x (filterLEq x y)) === (filterLEq x y)"},Lemma {lemmaName = "lemma58", lemmaSource = Nothing, hLemmas = ["lemma58"], indVar = Nothing, formula = "\n  (filterLEq x (cons x y)) === (cons x (filterLEq x y))"},Lemma {lemmaName = "lemma57", lemmaSource = Nothing, hLemmas = ["lemma57"], indVar = Nothing, formula = "\n  (filterLEq x (nil :: list P.Int)) === (nil :: list P.Int)"},Lemma {lemmaName = "lemma54", lemmaSource = Nothing, hLemmas = ["lemma54","lemma51","lemma49"], indVar = Nothing, formula = "\n  (filterGT x (filterGT y (cons x z))) ===\n    (filterGT x (cons x (filterGT y z)))"},Lemma {lemmaName = "lemma51", lemmaSource = Nothing, hLemmas = [], indVar = Just [1], formula = "\n  (filterGT y (filterGT x z)) === (filterGT x (filterGT y z))"},Lemma {lemmaName = "lemma50", lemmaSource = Nothing, hLemmas = ["lemma49"], indVar = Just [1], formula = "\n  (filterGT x (filterGT x y)) === (filterGT x (cons x y))"},Lemma {lemmaName = "lemma49", lemmaSource = Nothing, hLemmas = ["lemma49"], indVar = Nothing, formula = " (filterGT x (cons x y)) === (filterGT x y)"},Lemma {lemmaName = "lemma48", lemmaSource = Nothing, hLemmas = ["lemma48"], indVar = Nothing, formula = "\n  (filterGT x (nil :: list P.Int)) === (nil :: list P.Int)"},Lemma {lemmaName = "lemma46", lemmaSource = Nothing, hLemmas = ["lemma46"], indVar = Nothing, formula = "\n  (count (0) (cons (x P.+ x) y)) === (count (0) (cons x y))"},Lemma {lemmaName = "lemma43", lemmaSource = Nothing, hLemmas = ["lemma43"], indVar = Nothing, formula = "\n  (count x (cons (x P.+ x) y)) === (count x (cons (0) y))"},Lemma {lemmaName = "lemma36", lemmaSource = Nothing, hLemmas = ["lemma36","lemma28","lemma27"], indVar = Nothing, formula = "\n  (count y (cons x (nil :: list P.Int))) ===\n    (count x (cons y (nil :: list P.Int)))"},Lemma {lemmaName = "lemma31", lemmaSource = Nothing, hLemmas = ["lemma31"], indVar = Nothing, formula = " (count (1) (cons (0) x)) === (count (1) x)"},Lemma {lemmaName = "lemma30", lemmaSource = Nothing, hLemmas = ["lemma30"], indVar = Nothing, formula = " (count (0) (cons (1) x)) === (count (0) x)"},Lemma {lemmaName = "lemma29", lemmaSource = Nothing, hLemmas = ["lemma29","lemma28"], indVar = Nothing, formula = " ((0) P.> (count x y)) === P.False"},Lemma {lemmaName = "lemma28", lemmaSource = Nothing, hLemmas = [], indVar = Just [0], formula = " ((0) P.<= (count x y)) === P.True"},Lemma {lemmaName = "lemma27", lemmaSource = Nothing, hLemmas = ["lemma27"], indVar = Nothing, formula = " ((1) P.+ (count x y)) === (count x (cons x y))"},Lemma {lemmaName = "lemma26", lemmaSource = Nothing, hLemmas = ["lemma26"], indVar = Nothing, formula = " (count x (nil :: list P.Int)) === (0)"},Lemma {lemmaName = "lemma19", lemmaSource = Nothing, hLemmas = ["lemma19","lemma16"], indVar = Nothing, formula = " (bigger (cons x (cons (0) y)) (1)) === P.False"},Lemma {lemmaName = "lemma18", lemmaSource = Nothing, hLemmas = ["lemma18"], indVar = Nothing, formula = " (bigger (cons (y P.+ (1)) x) y) === (bigger x y)"},Lemma {lemmaName = "lemma17", lemmaSource = Nothing, hLemmas = ["lemma15","lemma17"], indVar = Nothing, formula = "\n  (bigger (cons (x P.+ x) y) (0)) ===\n    (bigger (cons x (cons x y)) (0))"},Lemma {lemmaName = "lemma16", lemmaSource = Nothing, hLemmas = ["lemma16"], indVar = Nothing, formula = " (bigger (cons y x) (y P.+ (1))) === P.False"},Lemma {lemmaName = "lemma15", lemmaSource = Nothing, hLemmas = ["lemma15"], indVar = Nothing, formula = "\n  (bigger (cons x (cons x y)) z) === (bigger (cons x y) z)"},Lemma {lemmaName = "lemma14", lemmaSource = Nothing, hLemmas = ["lemma14","lemma10"], indVar = Nothing, formula = " (bigger (cons x (cons z y)) z) === P.False"},Lemma {lemmaName = "lemma13", lemmaSource = Nothing, hLemmas = ["lemma13"], indVar = Nothing, formula = " (bigger (cons (1) x) (0)) === (bigger x (0))"},Lemma {lemmaName = "lemma12", lemmaSource = Nothing, hLemmas = ["lemma12"], indVar = Nothing, formula = " (bigger (cons (0) x) (1)) === P.False"},Lemma {lemmaName = "lemma11", lemmaSource = Nothing, hLemmas = ["lemma11"], indVar = Nothing, formula = "\n  (bigger (cons x (nil :: list P.Int)) y) === (x P.> y)"},Lemma {lemmaName = "lemma10", lemmaSource = Nothing, hLemmas = ["lemma10"], indVar = Nothing, formula = " (bigger (cons y x) y) === P.False"},Lemma {lemmaName = "lemma9", lemmaSource = Nothing, hLemmas = ["lemma9"], indVar = Nothing, formula = " (bigger (nil :: list P.Int) x) === P.True"},Lemma {lemmaName = "lemma8", lemmaSource = Nothing, hLemmas = ["lemma8"], indVar = Nothing, formula = " (cons y (z ++ x2)) === ((cons y z) ++ x2)"},Lemma {lemmaName = "lemma7", lemmaSource = Nothing, hLemmas = ["lemma5"], indVar = Just [0], formula = " ((y ++ z) ++ x2) === (y ++ (z ++ x2))"},Lemma {lemmaName = "lemma6", lemmaSource = Nothing, hLemmas = ["lemma6"], indVar = Nothing, formula = " ((nil :: list x) ++ y) === y"},Lemma {lemmaName = "lemma5", lemmaSource = Nothing, hLemmas = [], indVar = Just [0], formula = " (y ++ (nil :: list x)) === y"},Lemma {lemmaName = "lemma3", lemmaSource = Just "Sort.prop_QSortCount", hLemmas = ["Sort.prop_countcount","Sort.p_tmp"], indVar = Just [1], formula = " (count x (qsort xs)) === (count x xs)"},Lemma {lemmaName = "lemma2", lemmaSource = Just "Sort.p_tmp", hLemmas = [], indVar = Just [2], formula = "\n  (count y (cons x xs)) ===\n    (((count y (filterLEq x xs)) P.+\n        (count y (cons x (nil :: list P.Int)))) P.+\n       (count y (filterGT x xs)))"},Lemma {lemmaName = "lemma1", lemmaSource = Just "Sort.p_tmpNil", hLemmas = ["lemma1"], indVar = Nothing, formula = "\n  (count y (nil :: list P.Int)) ===\n    (count y (qsort (nil :: list P.Int)))"},Lemma {lemmaName = "lemma0", lemmaSource = Just "Sort.prop_countcount", hLemmas = [], indVar = Just [0], formula = "\n  ((count x bs) P.+ (count x cs)) === (count x (bs ++ cs))"}])