("735.61054s",[Lemma {lemmaName = "lemma72", lemmaSource = Nothing, hLemmas = ["lemma72","Sort.prop_countcount"], indVar = Nothing, formula = "\n  ((count x y) P.+ (count x z)) === (count x (y ++ z))"},Lemma {lemmaName = "lemma61", lemmaSource = Nothing, hLemmas = ["lemma61","Sort.prop_QSortCount"], indVar = Nothing, formula = " (count x (qsort y)) === (count x y)"},Lemma {lemmaName = "lemma59", lemmaSource = Nothing, hLemmas = ["lemma59"], indVar = Nothing, formula = "\n  (ordered (cons x (cons x y))) === (ordered (cons x y))"},Lemma {lemmaName = "lemma58", lemmaSource = Nothing, hLemmas = ["lemma58"], indVar = Nothing, formula = "\n  (ordered (cons x (nil :: list P.Int))) ===\n    (ordered (nil :: list P.Int))"},Lemma {lemmaName = "lemma49", lemmaSource = Nothing, hLemmas = [], indVar = Just [1], formula = " (filterGT x (filterLEq x y)) === (nil :: list P.Int)"},Lemma {lemmaName = "lemma47", lemmaSource = Nothing, hLemmas = ["lemma47"], indVar = Nothing, formula = "\n  (qsort (cons x (nil :: list P.Int))) ===\n    (cons x (nil :: list P.Int))"},Lemma {lemmaName = "lemma43", lemmaSource = Nothing, hLemmas = ["lemma43"], indVar = Nothing, formula = " (qsort (nil :: list P.Int)) === (nil :: list P.Int)"},Lemma {lemmaName = "lemma42", lemmaSource = Nothing, hLemmas = ["lemma42"], indVar = Nothing, formula = "\n  (filterLEq (0) (cons (x P.+ x) (nil :: list P.Int))) ===\n    (filterLEq x (cons (x P.+ x) (nil :: list P.Int)))"},Lemma {lemmaName = "lemma41", lemmaSource = Nothing, hLemmas = ["lemma41","lemma36"], indVar = Nothing, formula = "\n  (filterLEq y (filterLEq x (cons y z))) ===\n    (filterLEq x (cons y (filterLEq y z)))"},Lemma {lemmaName = "lemma40", lemmaSource = Nothing, hLemmas = ["lemma40"], indVar = Nothing, formula = "\n  (filterLEq (x P.+ x) (cons (0) (nil :: list P.Int))) ===\n    (filterLEq x (cons (0) (nil :: list P.Int)))"},Lemma {lemmaName = "lemma39", lemmaSource = Nothing, hLemmas = ["lemma39"], indVar = Nothing, formula = "\n  (filterLEq x (filterLEq y (cons y z))) ===\n    (filterLEq x (cons y (filterLEq y z)))"},Lemma {lemmaName = "lemma38", lemmaSource = Nothing, hLemmas = ["lemma38"], indVar = Nothing, formula = "\n  (filterLEq x (filterLEq y (cons y z))) ===\n    (filterLEq x (cons y (filterLEq y z)))"},Lemma {lemmaName = "lemma37", lemmaSource = Nothing, hLemmas = ["lemma37","lemma35"], indVar = Nothing, formula = "\n  (filterLEq x (cons y (filterLEq x z))) ===\n    (filterLEq x (cons y z))"},Lemma {lemmaName = "lemma36", lemmaSource = Nothing, hLemmas = [], indVar = Just [1], formula = "\n  (filterLEq y (filterLEq x z)) === (filterLEq x (filterLEq y z))"},Lemma {lemmaName = "lemma35", lemmaSource = Nothing, hLemmas = [], indVar = Just [1], formula = " (filterLEq x (filterLEq x y)) === (filterLEq x y)"},Lemma {lemmaName = "lemma34", lemmaSource = Nothing, hLemmas = ["lemma34"], indVar = Nothing, formula = "\n  (filterLEq x (cons x y)) === (cons x (filterLEq x y))"},Lemma {lemmaName = "lemma33", lemmaSource = Nothing, hLemmas = ["lemma33"], indVar = Nothing, formula = "\n  (filterLEq x (nil :: list P.Int)) === (nil :: list P.Int)"},Lemma {lemmaName = "lemma30", lemmaSource = Nothing, hLemmas = ["lemma30","lemma27","lemma25"], indVar = Nothing, formula = "\n  (filterGT x (filterGT y (cons x z))) ===\n    (filterGT x (cons x (filterGT y z)))"},Lemma {lemmaName = "lemma27", lemmaSource = Nothing, hLemmas = [], indVar = Just [1], formula = "\n  (filterGT y (filterGT x z)) === (filterGT x (filterGT y z))"},Lemma {lemmaName = "lemma26", lemmaSource = Nothing, hLemmas = ["lemma25"], indVar = Just [1], formula = "\n  (filterGT x (filterGT x y)) === (filterGT x (cons x y))"},Lemma {lemmaName = "lemma25", lemmaSource = Nothing, hLemmas = ["lemma25"], indVar = Nothing, formula = " (filterGT x (cons x y)) === (filterGT x y)"},Lemma {lemmaName = "lemma24", lemmaSource = Nothing, hLemmas = ["lemma24"], indVar = Nothing, formula = "\n  (filterGT x (nil :: list P.Int)) === (nil :: list P.Int)"},Lemma {lemmaName = "lemma22", lemmaSource = Nothing, hLemmas = ["lemma22"], indVar = Nothing, formula = "\n  (count (0) (cons (x P.+ x) y)) === (count (0) (cons x y))"},Lemma {lemmaName = "lemma19", lemmaSource = Nothing, hLemmas = ["lemma19"], indVar = Nothing, formula = "\n  (count x (cons (x P.+ x) y)) === (count x (cons (0) y))"},Lemma {lemmaName = "lemma16", lemmaSource = Nothing, hLemmas = ["lemma16","lemma13"], indVar = Nothing, formula = "\n  (count y (cons x (nil :: list P.Int))) ===\n    (count x (cons y (nil :: list P.Int)))"},Lemma {lemmaName = "lemma15", lemmaSource = Nothing, hLemmas = ["lemma15"], indVar = Nothing, formula = " (count (1) (cons (0) x)) === (count (1) x)"},Lemma {lemmaName = "lemma14", lemmaSource = Nothing, hLemmas = ["lemma14"], indVar = Nothing, formula = " (count (0) (cons (1) x)) === (count (0) x)"},Lemma {lemmaName = "lemma13", lemmaSource = Nothing, hLemmas = ["lemma13"], indVar = Nothing, formula = " ((1) P.+ (count x y)) === (count x (cons x y))"},Lemma {lemmaName = "lemma10", lemmaSource = Nothing, hLemmas = ["lemma10"], indVar = Nothing, formula = " (count x (nil :: list P.Int)) === (0)"},Lemma {lemmaName = "lemma9", lemmaSource = Nothing, hLemmas = ["lemma9"], indVar = Nothing, formula = " (cons y (z ++ x2)) === ((cons y z) ++ x2)"},Lemma {lemmaName = "lemma8", lemmaSource = Nothing, hLemmas = ["lemma8","Sort.prp_pp"], indVar = Nothing, formula = " ((y ++ z) ++ x2) === (y ++ (z ++ x2))"},Lemma {lemmaName = "lemma7", lemmaSource = Nothing, hLemmas = ["lemma7"], indVar = Nothing, formula = " ((nil :: list x) ++ y) === y"},Lemma {lemmaName = "lemma6", lemmaSource = Nothing, hLemmas = [], indVar = Just [0], formula = " (y ++ (nil :: list x)) === y"},Lemma {lemmaName = "lemma4", lemmaSource = Just "Sort.prop_QSortCount", hLemmas = ["Sort.prp_pp","Sort.prop_countcount","Sort.p_tmp"], indVar = Just [1], formula = " (count x (qsort xs)) === (count x xs)"},Lemma {lemmaName = "lemma3", lemmaSource = Just "Sort.p_tmp", hLemmas = [], indVar = Just [2], formula = "\n  (count y (cons x xs)) ===\n    (((count y (filterLEq x xs)) P.+\n        (count y (cons x (nil :: list P.Int)))) P.+\n       (count y (filterGT x xs)))"},Lemma {lemmaName = "lemma2", lemmaSource = Just "Sort.p_tmpNil", hLemmas = ["lemma2"], indVar = Nothing, formula = "\n  (count y (nil :: list P.Int)) ===\n    (count y (qsort (nil :: list P.Int)))"},Lemma {lemmaName = "lemma1", lemmaSource = Just "Sort.prop_countcount", hLemmas = [], indVar = Just [0], formula = "\n  ((count x bs) P.+ (count x cs)) === (count x (bs ++ cs))"},Lemma {lemmaName = "lemma0", lemmaSource = Just "Sort.prp_pp", hLemmas = [], indVar = Just [0], formula = " ((a1 ++ b) ++ c) === (a1 ++ (b ++ c))"}])