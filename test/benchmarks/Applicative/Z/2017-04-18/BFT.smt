("46.306957s",[Lemma {lemmaName = "lemma6", lemmaSource = Nothing, hLemmas = ["lemma8"], indVar = Just [1], formula = " (reverse (reverse y)) === y"},Lemma {lemmaName = "lemma26", lemmaSource = Nothing, hLemmas = [], indVar = Just [0], formula = " (x ++ y) === (++2 x y)"},Lemma {lemmaName = "lemma25", lemmaSource = Nothing, hLemmas = ["lemma25","Main.prop_Bft"], indVar = Nothing, formula = " (bft2 x) === (bft1 x)"},Lemma {lemmaName = "lemma24", lemmaSource = Nothing, hLemmas = ["lemma24","lemma18","lemma9","lemma23"], indVar = Nothing, formula = " (bft1 (Node x y)) === (cons x (bftList y))"},Lemma {lemmaName = "lemma23", lemmaSource = Nothing, hLemmas = ["lemma23"], indVar = Nothing, formula = " (++2 (cons x (nil :: list P.Int)) y) === (cons x y)"},Lemma {lemmaName = "lemma22", lemmaSource = Nothing, hLemmas = ["lemma22"], indVar = Nothing, formula = " (cons x (++2 y z)) === (++2 (cons x y) z)"},Lemma {lemmaName = "lemma21", lemmaSource = Nothing, hLemmas = ["lemma19"], indVar = Just [0], formula = " (++2 (++2 x y) z) === (++2 x (++2 y z))"},Lemma {lemmaName = "lemma20", lemmaSource = Nothing, hLemmas = ["lemma20"], indVar = Nothing, formula = " (++2 (nil :: list P.Int) x) === x"},Lemma {lemmaName = "lemma19", lemmaSource = Nothing, hLemmas = [], indVar = Just [0], formula = " (++2 x (nil :: list P.Int)) === x"},Lemma {lemmaName = "lemma18", lemmaSource = Nothing, hLemmas = ["lemma18"], indVar = Nothing, formula = "\n  (children (cons (Node x y) z)) === (y +++ (children z))"},Lemma {lemmaName = "lemma17", lemmaSource = Nothing, hLemmas = ["lemma11"], indVar = Just [1], formula = "\n  ((children x) +++ (children y)) === (children (x +++ y))"},Lemma {lemmaName = "lemma14", lemmaSource = Nothing, hLemmas = ["lemma14"], indVar = Nothing, formula = " (children (nil :: list Tree)) === (nil :: list Tree)"},Lemma {lemmaName = "lemma13", lemmaSource = Nothing, hLemmas = ["lemma13"], indVar = Nothing, formula = " ((cons x (nil :: list Tree)) +++ y) === (cons x y)"},Lemma {lemmaName = "lemma12", lemmaSource = Nothing, hLemmas = ["lemma12"], indVar = Nothing, formula = " (cons x (y +++ z)) === ((cons x y) +++ z)"},Lemma {lemmaName = "lemma11", lemmaSource = Nothing, hLemmas = ["lemma9"], indVar = Just [0], formula = " ((x +++ y) +++ z) === (x +++ (y +++ z))"},Lemma {lemmaName = "lemma10", lemmaSource = Nothing, hLemmas = ["lemma10"], indVar = Nothing, formula = " ((nil :: list Tree) +++ x) === x"},Lemma {lemmaName = "lemma9", lemmaSource = Nothing, hLemmas = [], indVar = Just [0], formula = " (x +++ (nil :: list Tree)) === x"},Lemma {lemmaName = "lemma8", lemmaSource = Nothing, hLemmas = ["lemma3","lemma1"], indVar = Just [2], formula = " ((reverse z) ++ (reverse y)) === (reverse (y ++ z))"},Lemma {lemmaName = "lemma7", lemmaSource = Nothing, hLemmas = ["lemma7"], indVar = Nothing, formula = "\n  (reverse (cons y (nil :: list x))) === (cons y (nil :: list x))"},Lemma {lemmaName = "lemma5", lemmaSource = Nothing, hLemmas = ["lemma5"], indVar = Nothing, formula = " (reverse (nil :: list x)) === (nil :: list x)"},Lemma {lemmaName = "lemma4", lemmaSource = Nothing, hLemmas = ["lemma4"], indVar = Nothing, formula = " (cons y (z ++ x2)) === ((cons y z) ++ x2)"},Lemma {lemmaName = "lemma3", lemmaSource = Nothing, hLemmas = ["lemma1"], indVar = Just [0], formula = " ((y ++ z) ++ x2) === (y ++ (z ++ x2))"},Lemma {lemmaName = "lemma2", lemmaSource = Nothing, hLemmas = ["lemma2"], indVar = Nothing, formula = " ((nil :: list x) ++ y) === y"},Lemma {lemmaName = "lemma1", lemmaSource = Nothing, hLemmas = [], indVar = Just [0], formula = " (y ++ (nil :: list x)) === y"},Lemma {lemmaName = "lemma0", lemmaSource = Just "Main.prop_Bft", hLemmas = [], indVar = Just [0], formula = " (bft1 t) === (bft2 t)"}])