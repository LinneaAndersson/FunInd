("1497.344873s",[Lemma {lemmaName = "lemma131", lemmaSource = Nothing, hLemmas = ["lemma27","lemma59"], indVar = Just [1], formula = "\n  (count (0) (filterLEq (x P.+ x) y)) ===\n    (count (0) (filterLEq x (filterLEq x y)))"},Lemma {lemmaName = "lemma130", lemmaSource = Nothing, hLemmas = [], indVar = Just [1], formula = "\n  (count (0) (filterGT (x P.+ x) y)) ===\n    (count (0) (filterGT x y))"},Lemma {lemmaName = "lemma118", lemmaSource = Nothing, hLemmas = ["Sort.prop_countcount"], indVar = Nothing, formula = "\n  ((count x y) P.+ (count x z)) === (count x (y ++ z))"},Lemma {lemmaName = "lemma97", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (smallerEq (nil :: list P.Int) x) ===\n    (ordered (nil :: list P.Int))"},Lemma {lemmaName = "lemma95", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (smallerEq (cons y (cons x z)) x2) ===\n    (smallerEq (cons x (cons y z)) x2)"},Lemma {lemmaName = "lemma94", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (smallerEq (cons (0) (nil :: list P.Int)) (x P.+ x)) ===\n    (smallerEq (cons (0) (nil :: list P.Int)) x)"},Lemma {lemmaName = "lemma92", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (smallerEq (cons (x P.+ x) y) (0)) ===\n    (smallerEq (cons x (cons x y)) (0))"},Lemma {lemmaName = "lemma89", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (smallerEq (cons x (cons x y)) z) === (smallerEq (cons x y) z)"},Lemma {lemmaName = "lemma87", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (smallerEq (nil :: list P.Int) (0)) ===\n    (smallerEq (nil :: list P.Int) x)"},Lemma {lemmaName = "lemma85", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (ordered (cons x (nil :: list P.Int))) ===\n    (ordered (nil :: list P.Int))"},Lemma {lemmaName = "lemma71", lemmaSource = Nothing, hLemmas = ["lemma5"], indVar = Nothing, formula = "\n  (qsort (cons x (nil :: list P.Int))) ===\n    (cons x (nil :: list P.Int))"},Lemma {lemmaName = "lemma67", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (qsort (nil :: list P.Int)) === (nil :: list P.Int)"},Lemma {lemmaName = "lemma64", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (filterLEq (x P.+ x) (cons (0) (nil :: list P.Int))) ===\n    (filterLEq x (cons (0) (nil :: list P.Int)))"},Lemma {lemmaName = "lemma61", lemmaSource = Nothing, hLemmas = ["lemma59"], indVar = Nothing, formula = "\n  (filterLEq x (cons y (filterLEq x z))) ===\n    (filterLEq x (cons y z))"},Lemma {lemmaName = "lemma59", lemmaSource = Nothing, hLemmas = [], indVar = Just [1], formula = " (filterLEq x (filterLEq x y)) === (filterLEq x y)"},Lemma {lemmaName = "lemma57", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (filterLEq x (nil :: list P.Int)) === (nil :: list P.Int)"},Lemma {lemmaName = "lemma55", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (filterGT (x P.+ x) (cons (0) (nil :: list P.Int))) ===\n    (filterGT x (cons (0) (nil :: list P.Int)))"},Lemma {lemmaName = "lemma48", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (filterGT x (nil :: list P.Int)) === (nil :: list P.Int)"},Lemma {lemmaName = "lemma46", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (count (0) (cons (x P.+ x) y)) === (count (0) (cons x y))"},Lemma {lemmaName = "lemma36", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (count y (cons x (nil :: list P.Int))) ===\n    (count x (cons y (nil :: list P.Int)))"},Lemma {lemmaName = "lemma31", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (count (1) (cons (0) x)) === (count (1) x)"},Lemma {lemmaName = "lemma30", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (count (0) (cons (1) x)) === (count (0) x)"},Lemma {lemmaName = "lemma29", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " ((0) P.> (count x y)) === P.False"},Lemma {lemmaName = "lemma28", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " ((0) P.<= (count x y)) === P.True"},Lemma {lemmaName = "lemma27", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " ((1) P.+ (count x y)) === (count x (cons x y))"},Lemma {lemmaName = "lemma26", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (count x (nil :: list P.Int)) === (0)"},Lemma {lemmaName = "lemma25", lemmaSource = Nothing, hLemmas = ["Sort.prop_countcount","lemma7"], indVar = Nothing, formula = "\n  (bigger (cons (x P.+ (1)) y) (1)) ===\n    (bigger (cons (x P.+ x) y) (1))"},Lemma {lemmaName = "lemma23", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (bigger (cons y (cons x z)) x2) ===\n    (bigger (cons x (cons y z)) x2)"},Lemma {lemmaName = "lemma22", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (bigger (cons (1) (cons (0) x)) y) === (bigger (cons (0) x) y)"},Lemma {lemmaName = "lemma21", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (bigger (cons (0) (cons (1) x)) y) === (bigger (cons (0) x) y)"},Lemma {lemmaName = "lemma20", lemmaSource = Nothing, hLemmas = ["lemma13"], indVar = Nothing, formula = "\n  (bigger (cons x (cons (1) y)) (0)) === (bigger (cons x y) (0))"},Lemma {lemmaName = "lemma19", lemmaSource = Nothing, hLemmas = ["lemma12"], indVar = Nothing, formula = " (bigger (cons x (cons (0) y)) (1)) === P.False"},Lemma {lemmaName = "lemma17", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (bigger (cons (x P.+ x) y) (0)) ===\n    (bigger (cons x (cons x y)) (0))"},Lemma {lemmaName = "lemma15", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (bigger (cons x (cons x y)) z) === (bigger (cons x y) z)"},Lemma {lemmaName = "lemma13", lemmaSource = Nothing, hLemmas = ["lemma11"], indVar = Nothing, formula = " (bigger (cons (1) x) (0)) === (bigger x (0))"},Lemma {lemmaName = "lemma12", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (bigger (cons (0) x) (1)) === P.False"},Lemma {lemmaName = "lemma11", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (bigger (cons x (nil :: list P.Int)) y) === (x P.> y)"},Lemma {lemmaName = "lemma9", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (bigger (nil :: list P.Int) x) === P.True"},Lemma {lemmaName = "lemma8", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (cons y (z ++ x2)) === ((cons y z) ++ x2)"},Lemma {lemmaName = "lemma7", lemmaSource = Nothing, hLemmas = [], indVar = Just [0], formula = " ((y ++ z) ++ x2) === (y ++ (z ++ x2))"},Lemma {lemmaName = "lemma6", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " ((nil :: list x) ++ y) === y"},Lemma {lemmaName = "lemma5", lemmaSource = Nothing, hLemmas = [], indVar = Just [0], formula = " (y ++ (nil :: list x)) === y"},Lemma {lemmaName = "lemma1", lemmaSource = Just "Sort.p_tmpNil", hLemmas = [], indVar = Nothing, formula = "\n  (count y (nil :: list P.Int)) ===\n    (count y (qsort (nil :: list P.Int)))"},Lemma {lemmaName = "lemma0", lemmaSource = Just "Sort.prop_countcount", hLemmas = [], indVar = Just [0], formula = "\n  ((count x bs) P.+ (count x cs)) === (count x (bs ++ cs))"}])