("82.842748s",[Lemma {lemmaName = "lemma45", lemmaSource = Nothing, hLemmas = ["lemma1","lemma3","lemma38","lemma5"], indVar = Just [1], formula = " ((map1 x) ++ (map1 y)) === (map1 (x ++ y))"},Lemma {lemmaName = "lemma38", lemmaSource = Nothing, hLemmas = ["lemma40"], indVar = Just [1], formula = " (map1 (map1 x)) === (map1 x)"},Lemma {lemmaName = "lemma0", lemmaSource = Just "Main.prop1_Simp", hLemmas = ["lemma1","lemma10","lemma30","lemma40","lemma41","lemma43","lemma44","lemma5","lemma9"], indVar = Just [1], formula = " (eval ts p) === (eval ts (simp p))"},Lemma {lemmaName = "lemma46", lemmaSource = Nothing, hLemmas = ["lemma18"], indVar = Nothing, formula = " (and2 (cons (not2 x) (cons x y))) === False"},Lemma {lemmaName = "lemma44", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (map1 (cons x (nil :: list Prop1))) ===\n    (cons (simp x) (nil :: list Prop1))"},Lemma {lemmaName = "lemma43", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (simp (And (nil :: list Prop1))) === (And (nil :: list Prop1))"},Lemma {lemmaName = "lemma42", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (simpNot (simp x)) === (simp (Not x))"},Lemma {lemmaName = "lemma41", lemmaSource = Nothing, hLemmas = ["lemma40"], indVar = Nothing, formula = " (simp (simpNot x)) === (simp (Not x))"},Lemma {lemmaName = "lemma40", lemmaSource = Nothing, hLemmas = ["lemma1","lemma10","lemma3","lemma30","lemma5"], indVar = Just [0], formula = " (simp (simp x)) === (simp x)"},Lemma {lemmaName = "lemma39", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (simp (Var x)) === (Var x)"},Lemma {lemmaName = "lemma37", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (map1 (nil :: list Prop1)) === (nil :: list Prop1)"},Lemma {lemmaName = "lemma36", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (simpNot (Var x)) === (Not (Var x))"},Lemma {lemmaName = "lemma35", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (simpNot (Not x)) === x"},Lemma {lemmaName = "lemma34", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (simpNot (And x)) === (Not (And x))"},Lemma {lemmaName = "lemma33", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (not2 (not2 x)) === x"},Lemma {lemmaName = "lemma32", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (not2 True) === False"},Lemma {lemmaName = "lemma31", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (not2 False) === True"},Lemma {lemmaName = "lemma30", lemmaSource = Nothing, hLemmas = [], indVar = Just [0], formula = " (simpAnd (flatAnd x)) === (simpAnd x)"},Lemma {lemmaName = "lemma29", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (makeAnd (flatAnd x)) === (simpAnd x)"},Lemma {lemmaName = "lemma28", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (simpAnd (nil :: list Prop1)) === (And (nil :: list Prop1))"},Lemma {lemmaName = "lemma27", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (makeAnd (cons x (cons y z))) === (And (cons x (cons y z)))"},Lemma {lemmaName = "lemma26", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (makeAnd (cons x (nil :: list Prop1))) === x"},Lemma {lemmaName = "lemma25", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (makeAnd (nil :: list Prop1)) === (And (nil :: list Prop1))"},Lemma {lemmaName = "lemma24", lemmaSource = Nothing, hLemmas = ["lemma23"], indVar = Nothing, formula = " (eval (cons y x) (Not (Var y))) === False"},Lemma {lemmaName = "lemma23", lemmaSource = Nothing, hLemmas = ["lemma19"], indVar = Nothing, formula = " (eval (cons y x) (Var y)) === True"},Lemma {lemmaName = "lemma22", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (eval x (And (nil :: list Prop1))) === True"},Lemma {lemmaName = "lemma21", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (map x (nil :: list Prop1)) === (nil :: list Bool2)"},Lemma {lemmaName = "lemma20", lemmaSource = Nothing, hLemmas = ["lemma19"], indVar = Nothing, formula = " (elem y (cons x (cons y z))) === True"},Lemma {lemmaName = "lemma19", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (elem x (cons x y)) === True"},Lemma {lemmaName = "lemma18", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (and2 (cons y (cons x z))) === (and2 (cons x (cons y z)))"},Lemma {lemmaName = "lemma17", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (and2 (cons x (cons x y))) === (and2 (cons x y))"},Lemma {lemmaName = "lemma16", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (and2 (cons (and2 y) x)) === (and2 (cons (and2 x) y))"},Lemma {lemmaName = "lemma15", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (and2 (cons (and2 x) x)) === (and2 x)"},Lemma {lemmaName = "lemma14", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (and2 (cons True x)) === (and2 x)"},Lemma {lemmaName = "lemma13", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (and2 (cons False x)) === False"},Lemma {lemmaName = "lemma12", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (and2 (cons x (nil :: list Bool2))) === x"},Lemma {lemmaName = "lemma11", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (and2 (nil :: list Bool2)) === True"},Lemma {lemmaName = "lemma10", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (flatAnd (cons (Var x) y)) === (cons (Var x) (flatAnd y))"},Lemma {lemmaName = "lemma9", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (flatAnd (cons (Not x) y)) === (cons (Not x) (flatAnd y))"},Lemma {lemmaName = "lemma8", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (flatAnd (cons (And x) y)) === (x ++ (flatAnd y))"},Lemma {lemmaName = "lemma6", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (flatAnd (nil :: list Prop1)) === (nil :: list Prop1)"},Lemma {lemmaName = "lemma5", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " ((cons x (nil :: list Prop1)) ++ y) === (cons x y)"},Lemma {lemmaName = "lemma4", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (cons x (y ++ z)) === ((cons x y) ++ z)"},Lemma {lemmaName = "lemma3", lemmaSource = Nothing, hLemmas = ["lemma1"], indVar = Just [0], formula = " ((x ++ y) ++ z) === (x ++ (y ++ z))"},Lemma {lemmaName = "lemma2", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " ((nil :: list Prop1) ++ x) === x"},Lemma {lemmaName = "lemma1", lemmaSource = Nothing, hLemmas = [], indVar = Just [0], formula = " (x ++ (nil :: list Prop1)) === x"}])