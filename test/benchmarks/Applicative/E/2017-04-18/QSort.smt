("2161.375704s",[Lemma {lemmaName = "lemma101", lemmaSource = Nothing, hLemmas = ["lemma54","lemma79","lemma99"], indVar = Nothing, formula = "\n  (ordered (filterGT y (cons x z))) ===\n    (ordered (cons x (filterGT y z)))"},Lemma {lemmaName = "lemma99", lemmaSource = Nothing, hLemmas = [], indVar = Just [1], formula = "\n  (ordered (cons x (filterGT x y))) === (ordered (filterGT x y))"},Lemma {lemmaName = "lemma90", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (smallerEq (nil :: list Nat) x) === (ordered (nil :: list Nat))"},Lemma {lemmaName = "lemma88", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (smallerEq (cons y (cons x z)) x2) ===\n    (smallerEq (cons x (cons y z)) x2)"},Lemma {lemmaName = "lemma87", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (smallerEq (cons Z (nil :: list Nat)) (plus x x)) ===\n    (smallerEq (cons Z (nil :: list Nat)) x)"},Lemma {lemmaName = "lemma85", lemmaSource = Nothing, hLemmas = ["lemma14","lemma16","lemma20","lemma82"], indVar = Nothing, formula = "\n  (smallerEq (cons (plus x x) y) Z) ===\n    (smallerEq (cons x (cons x y)) Z)"},Lemma {lemmaName = "lemma83", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (smallerEq (cons x (cons z y)) z) === (smallerEq (cons x y) z)"},Lemma {lemmaName = "lemma82", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (smallerEq (cons x (cons x y)) z) === (smallerEq (cons x y) z)"},Lemma {lemmaName = "lemma81", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (smallerEq (cons y x) y) === (smallerEq x y)"},Lemma {lemmaName = "lemma80", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (smallerEq (nil :: list Nat) Z) ===\n    (smallerEq (nil :: list Nat) x)"},Lemma {lemmaName = "lemma79", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (ordered (cons x (cons x y))) === (ordered (cons x y))"},Lemma {lemmaName = "lemma78", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (ordered (cons x (nil :: list Nat))) ===\n    (ordered (nil :: list Nat))"},Lemma {lemmaName = "lemma67", lemmaSource = Nothing, hLemmas = ["lemma5","lemma7"], indVar = Nothing, formula = "\n  (qsort (cons x (nil :: list Nat))) ===\n    (cons x (nil :: list Nat))"},Lemma {lemmaName = "lemma63", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (qsort (nil :: list Nat)) === (nil :: list Nat)"},Lemma {lemmaName = "lemma60", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (filterLEq (plus x x) (cons Z (nil :: list Nat))) ===\n    (filterLEq x (cons Z (nil :: list Nat)))"},Lemma {lemmaName = "lemma59", lemmaSource = Nothing, hLemmas = ["lemma54"], indVar = Nothing, formula = "\n  (filterLEq x (filterLEq y (cons y z))) ===\n    (filterLEq x (cons y (filterLEq y z)))"},Lemma {lemmaName = "lemma58", lemmaSource = Nothing, hLemmas = ["lemma54"], indVar = Nothing, formula = "\n  (filterLEq x (filterLEq y (cons y z))) ===\n    (filterLEq x (cons y (filterLEq y z)))"},Lemma {lemmaName = "lemma54", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (filterLEq x (cons x y)) === (cons x (filterLEq x y))"},Lemma {lemmaName = "lemma53", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (filterLEq x (nil :: list Nat)) === (nil :: list Nat)"},Lemma {lemmaName = "lemma51", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (filterGT (plus x x) (cons Z (nil :: list Nat))) ===\n    (filterGT x (cons Z (nil :: list Nat)))"},Lemma {lemmaName = "lemma50", lemmaSource = Nothing, hLemmas = ["lemma45"], indVar = Nothing, formula = "\n  (filterGT x (filterGT y (cons x z))) ===\n    (filterGT x (cons x (filterGT y z)))"},Lemma {lemmaName = "lemma48", lemmaSource = Nothing, hLemmas = ["lemma45"], indVar = Nothing, formula = "\n  (filterGT x (cons y (cons x z))) === (filterGT x (cons y z))"},Lemma {lemmaName = "lemma45", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (filterGT x (cons x y)) === (filterGT x y)"},Lemma {lemmaName = "lemma44", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (filterGT x (nil :: list Nat)) === (nil :: list Nat)"},Lemma {lemmaName = "lemma40", lemmaSource = Nothing, hLemmas = ["lemma14","lemma16","lemma9"], indVar = Nothing, formula = "\n  (count Z (cons (plus x x) y)) === (count Z (cons x y))"},Lemma {lemmaName = "lemma35", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (count y (cons x (nil :: list Nat))) ===\n    (count x (cons y (nil :: list Nat)))"},Lemma {lemmaName = "lemma34", lemmaSource = Nothing, hLemmas = ["lemma26","lemma30"], indVar = Nothing, formula = " (gt x (count x z)) === (gt x (count y z))"},Lemma {lemmaName = "lemma32", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (count (S Z) (cons Z x)) === (count (S Z) x)"},Lemma {lemmaName = "lemma31", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (count Z (cons (S Z) x)) === (count Z x)"},Lemma {lemmaName = "lemma30", lemmaSource = Nothing, hLemmas = [], indVar = Just [0], formula = " (gt (count (S Z) x) y) === P.False"},Lemma {lemmaName = "lemma27", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " P.True === P.True"},Lemma {lemmaName = "lemma26", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (plus (S Z) (count x y)) === (count x (cons x y))"},Lemma {lemmaName = "lemma25", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (count x (nil :: list Nat)) === Z"},Lemma {lemmaName = "lemma24", lemmaSource = Nothing, hLemmas = ["lemma16","lemma19","lemma20"], indVar = Nothing, formula = "\n  (bigger (cons (S x) y) (S Z)) ===\n    (bigger (cons (plus x x) y) (S Z))"},Lemma {lemmaName = "lemma22", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (bigger (cons y (cons x z)) x2) ===\n    (bigger (cons x (cons y z)) x2)"},Lemma {lemmaName = "lemma21", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (bigger (cons (S Z) (cons Z x)) y) === (bigger (cons Z x) y)"},Lemma {lemmaName = "lemma20", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (bigger (cons Z (cons (S Z) x)) y) === (bigger (cons Z x) y)"},Lemma {lemmaName = "lemma19", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (bigger (cons x (cons (S Z) y)) Z) === (bigger (cons x y) Z)"},Lemma {lemmaName = "lemma18", lemmaSource = Nothing, hLemmas = ["lemma11"], indVar = Nothing, formula = " (bigger (cons x (cons Z y)) (S Z)) === P.False"},Lemma {lemmaName = "lemma16", lemmaSource = Nothing, hLemmas = ["lemma14"], indVar = Nothing, formula = "\n  (bigger (cons (plus x x) y) Z) ===\n    (bigger (cons x (cons x y)) Z)"},Lemma {lemmaName = "lemma14", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (bigger (cons x (cons x y)) z) === (bigger (cons x y) z)"},Lemma {lemmaName = "lemma13", lemmaSource = Nothing, hLemmas = ["lemma9"], indVar = Nothing, formula = " (bigger (cons x (cons z y)) z) === P.False"},Lemma {lemmaName = "lemma12", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (bigger (cons (S Z) x) Z) === (bigger x Z)"},Lemma {lemmaName = "lemma11", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (bigger (cons Z x) (S Z)) === P.False"},Lemma {lemmaName = "lemma10", lemmaSource = Nothing, hLemmas = [], indVar = Just [1], formula = " (bigger (cons x (nil :: list Nat)) y) === (gt x y)"},Lemma {lemmaName = "lemma9", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (bigger (cons y x) y) === P.False"},Lemma {lemmaName = "lemma8", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (bigger (nil :: list Nat) x) === P.True"},Lemma {lemmaName = "lemma7", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " ((cons x (nil :: list Nat)) ++ y) === (cons x y)"},Lemma {lemmaName = "lemma6", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (cons x (y ++ z)) === ((cons x y) ++ z)"},Lemma {lemmaName = "lemma5", lemmaSource = Nothing, hLemmas = ["lemma3"], indVar = Just [0], formula = " ((x ++ y) ++ z) === (x ++ (y ++ z))"},Lemma {lemmaName = "lemma4", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " ((nil :: list Nat) ++ x) === x"},Lemma {lemmaName = "lemma3", lemmaSource = Nothing, hLemmas = [], indVar = Just [0], formula = " (x ++ (nil :: list Nat)) === x"}])