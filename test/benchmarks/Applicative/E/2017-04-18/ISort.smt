("489.043373s",[Lemma {lemmaName = "lemma50", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (insert Z (cons (count x y) z)) ===\n    (cons Z (cons (count x y) z))"},Lemma {lemmaName = "lemma45", lemmaSource = Nothing, hLemmas = ["ISort.prop_countcount"], indVar = Nothing, formula = "\n  (plus (count x y) (count x z)) === (count x (y ++ z))"},Lemma {lemmaName = "lemma43", lemmaSource = Nothing, hLemmas = ["lemma33","lemma4","lemma6"], indVar = Nothing, formula = "\n  (ordered (cons x (insert x y))) ===\n    (ordered (cons x (cons x y)))"},Lemma {lemmaName = "lemma33", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (ordered (cons x (cons x y))) === (ordered (cons x y))"},Lemma {lemmaName = "lemma32", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (ordered (cons x (nil :: list Nat))) ===\n    (ordered (nil :: list Nat))"},Lemma {lemmaName = "lemma30", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (isort (cons x y)) === (insert x (isort y))"},Lemma {lemmaName = "lemma28", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (isort (nil :: list Nat)) === (nil :: list Nat)"},Lemma {lemmaName = "lemma26", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (insert x (cons x y)) === (cons x (cons x y))"},Lemma {lemmaName = "lemma25", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (insert x (nil :: list Nat)) === (cons x (nil :: list Nat))"},Lemma {lemmaName = "lemma21", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (count Z (cons (plus x x) y)) === (count Z (cons x y))"},Lemma {lemmaName = "lemma15", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = "\n  (count y (cons x (nil :: list Nat))) ===\n    (count x (cons y (nil :: list Nat)))"},Lemma {lemmaName = "lemma13", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (count (S Z) (cons Z x)) === (count (S Z) x)"},Lemma {lemmaName = "lemma12", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (count Z (cons (S Z) x)) === (count Z x)"},Lemma {lemmaName = "lemma10", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " P.True === P.True"},Lemma {lemmaName = "lemma9", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (plus (S Z) (count x y)) === (count x (cons x y))"},Lemma {lemmaName = "lemma8", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (count x (nil :: list Nat)) === Z"},Lemma {lemmaName = "lemma7", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " (cons y (z ++ x2)) === ((cons y z) ++ x2)"},Lemma {lemmaName = "lemma6", lemmaSource = Nothing, hLemmas = ["lemma4"], indVar = Just [0], formula = " ((y ++ z) ++ x2) === (y ++ (z ++ x2))"},Lemma {lemmaName = "lemma5", lemmaSource = Nothing, hLemmas = [], indVar = Nothing, formula = " ((nil :: list x) ++ y) === y"},Lemma {lemmaName = "lemma4", lemmaSource = Nothing, hLemmas = [], indVar = Just [0], formula = " (y ++ (nil :: list x)) === y"},Lemma {lemmaName = "lemma0", lemmaSource = Just "ISort.prop_countcount", hLemmas = [], indVar = Just [3], formula = "\n  (plus (count x bs) (count x cs)) === (count x (bs ++ cs))"}])