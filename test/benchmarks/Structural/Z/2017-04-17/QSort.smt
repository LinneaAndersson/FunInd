("1449.612605s",[Lemma {lemmaName = "lemma87", lemmaSource = Nothing, hLemmas = ["lemma87"], indVar = Nothing, formula = "\n  (smallerEq (nil :: list P.Int) x) ===\n    (ordered (nil :: list P.Int))"},Lemma {lemmaName = "lemma86", lemmaSource = Nothing, hLemmas = ["lemma86"], indVar = Nothing, formula = "\n  (smallerEq (cons (0) x) (y P.+ y)) ===\n    (smallerEq (cons y x) (y P.+ y))"},Lemma {lemmaName = "lemma85", lemmaSource = Nothing, hLemmas = ["lemma85"], indVar = Nothing, formula = "\n  (smallerEq (cons y (cons x z)) x2) ===\n    (smallerEq (cons x (cons y z)) x2)"},Lemma {lemmaName = "lemma84", lemmaSource = Nothing, hLemmas = ["lemma84"], indVar = Nothing, formula = "\n  (smallerEq (cons (0) (nil :: list P.Int)) (x P.+ x)) ===\n    (smallerEq (cons (0) (nil :: list P.Int)) x)"},Lemma {lemmaName = "lemma83", lemmaSource = Nothing, hLemmas = ["lemma83"], indVar = Nothing, formula = "\n  (smallerEq (cons (y P.+ x) (nil :: list P.Int)) x) ===\n    (smallerEq (cons y (nil :: list P.Int)) (0))"},Lemma {lemmaName = "lemma82", lemmaSource = Nothing, hLemmas = ["lemma79","lemma82"], indVar = Nothing, formula = "\n  (smallerEq (cons (x P.+ x) y) (0)) ===\n    (smallerEq (cons x (cons x y)) (0))"},Lemma {lemmaName = "lemma81", lemmaSource = Nothing, hLemmas = ["lemma81"], indVar = Nothing, formula = "\n  (smallerEq (cons x (nil :: list P.Int)) (y P.+ x)) ===\n    (smallerEq (cons (0) (nil :: list P.Int)) y)"},Lemma {lemmaName = "lemma80", lemmaSource = Nothing, hLemmas = ["lemma78","lemma80"], indVar = Nothing, formula = "\n  (smallerEq (cons x (cons z y)) z) === (smallerEq (cons x y) z)"},Lemma {lemmaName = "lemma79", lemmaSource = Nothing, hLemmas = ["lemma79"], indVar = Nothing, formula = "\n  (smallerEq (cons x (cons x y)) z) === (smallerEq (cons x y) z)"},Lemma {lemmaName = "lemma78", lemmaSource = Nothing, hLemmas = ["lemma78"], indVar = Nothing, formula = " (smallerEq (cons y x) y) === (smallerEq x y)"},Lemma {lemmaName = "lemma77", lemmaSource = Nothing, hLemmas = ["lemma77"], indVar = Nothing, formula = "\n  (smallerEq (nil :: list P.Int) (0)) ===\n    (smallerEq (nil :: list P.Int) x)"},Lemma {lemmaName = "lemma76", lemmaSource = Nothing, hLemmas = ["lemma76"], indVar = Nothing, formula = "\n  (ordered (cons x (cons x y))) === (ordered (cons x y))"},Lemma {lemmaName = "lemma75", lemmaSource = Nothing, hLemmas = ["lemma75"], indVar = Nothing, formula = "\n  (ordered (cons x (nil :: list P.Int))) ===\n    (ordered (nil :: list P.Int))"},Lemma {lemmaName = "lemma64", lemmaSource = Nothing, hLemmas = ["lemma64"], indVar = Nothing, formula = "\n  (qsort (cons x (nil :: list P.Int))) ===\n    (cons x (nil :: list P.Int))"},Lemma {lemmaName = "lemma60", lemmaSource = Nothing, hLemmas = ["lemma60"], indVar = Nothing, formula = " (qsort (nil :: list P.Int)) === (nil :: list P.Int)"},Lemma {lemmaName = "lemma59", lemmaSource = Nothing, hLemmas = ["lemma59"], indVar = Nothing, formula = "\n  (filterLEq (0) (cons (x P.+ x) (nil :: list P.Int))) ===\n    (filterLEq x (cons (x P.+ x) (nil :: list P.Int)))"},Lemma {lemmaName = "lemma57", lemmaSource = Nothing, hLemmas = ["lemma57"], indVar = Nothing, formula = "\n  (filterLEq (x P.+ x) (cons (0) (nil :: list P.Int))) ===\n    (filterLEq x (cons (0) (nil :: list P.Int)))"},Lemma {lemmaName = "lemma56", lemmaSource = Nothing, hLemmas = ["lemma56"], indVar = Nothing, formula = "\n  (filterLEq x (filterLEq y (cons y z))) ===\n    (filterLEq x (cons y (filterLEq y z)))"},Lemma {lemmaName = "lemma55", lemmaSource = Nothing, hLemmas = ["lemma55"], indVar = Nothing, formula = "\n  (filterLEq x (filterLEq y (cons y z))) ===\n    (filterLEq x (cons y (filterLEq y z)))"},Lemma {lemmaName = "lemma51", lemmaSource = Nothing, hLemmas = ["lemma51"], indVar = Nothing, formula = "\n  (filterLEq x (cons x y)) === (cons x (filterLEq x y))"},Lemma {lemmaName = "lemma50", lemmaSource = Nothing, hLemmas = ["lemma50"], indVar = Nothing, formula = "\n  (filterLEq x (nil :: list P.Int)) === (nil :: list P.Int)"},Lemma {lemmaName = "lemma48", lemmaSource = Nothing, hLemmas = ["lemma48"], indVar = Nothing, formula = "\n  (filterGT (x P.+ x) (cons (0) (nil :: list P.Int))) ===\n    (filterGT x (cons (0) (nil :: list P.Int)))"},Lemma {lemmaName = "lemma47", lemmaSource = Nothing, hLemmas = ["lemma47"], indVar = Nothing, formula = "\n  (filterGT x (filterGT y (cons x z))) ===\n    (filterGT x (cons x (filterGT y z)))"},Lemma {lemmaName = "lemma45", lemmaSource = Nothing, hLemmas = ["lemma45","lemma42"], indVar = Nothing, formula = "\n  (filterGT x (cons y (cons x z))) === (filterGT x (cons y z))"},Lemma {lemmaName = "lemma42", lemmaSource = Nothing, hLemmas = ["lemma42"], indVar = Nothing, formula = " (filterGT x (cons x y)) === (filterGT x y)"},Lemma {lemmaName = "lemma41", lemmaSource = Nothing, hLemmas = ["lemma41"], indVar = Nothing, formula = "\n  (filterGT x (nil :: list P.Int)) === (nil :: list P.Int)"},Lemma {lemmaName = "lemma40", lemmaSource = Nothing, hLemmas = ["lemma40"], indVar = Nothing, formula = "\n  (count (x P.+ x) (cons (0) y)) === (count (x P.+ x) (cons x y))"},Lemma {lemmaName = "lemma38", lemmaSource = Nothing, hLemmas = ["lemma38"], indVar = Nothing, formula = "\n  (count (0) (cons (x P.+ x) y)) === (count (0) (cons x y))"},Lemma {lemmaName = "lemma37", lemmaSource = Nothing, hLemmas = ["lemma37","lemma33","lemma35"], indVar = Nothing, formula = "\n  (count x (cons (y P.+ x) (nil :: list P.Int))) ===\n    (count y (cons (0) (nil :: list P.Int)))"},Lemma {lemmaName = "lemma35", lemmaSource = Nothing, hLemmas = ["lemma35"], indVar = Nothing, formula = "\n  (count x (cons (x P.+ x) y)) === (count x (cons (0) y))"},Lemma {lemmaName = "lemma33", lemmaSource = Nothing, hLemmas = ["lemma33","lemma25"], indVar = Nothing, formula = "\n  (count y (cons x (nil :: list P.Int))) ===\n    (count x (cons y (nil :: list P.Int)))"},Lemma {lemmaName = "lemma30", lemmaSource = Nothing, hLemmas = ["lemma30"], indVar = Nothing, formula = " (count (1) (cons (0) x)) === (count (1) x)"},Lemma {lemmaName = "lemma29", lemmaSource = Nothing, hLemmas = ["lemma29"], indVar = Nothing, formula = " (count (0) (cons (1) x)) === (count (0) x)"},Lemma {lemmaName = "lemma25", lemmaSource = Nothing, hLemmas = ["lemma25"], indVar = Nothing, formula = " ((1) P.+ (count x y)) === (count x (cons x y))"},Lemma {lemmaName = "lemma24", lemmaSource = Nothing, hLemmas = ["lemma24"], indVar = Nothing, formula = " (count x (nil :: list P.Int)) === (0)"},Lemma {lemmaName = "lemma17", lemmaSource = Nothing, hLemmas = ["lemma17","lemma14"], indVar = Nothing, formula = " (bigger (cons x (cons (0) y)) (1)) === P.False"},Lemma {lemmaName = "lemma16", lemmaSource = Nothing, hLemmas = ["lemma16"], indVar = Nothing, formula = " (bigger (cons (y P.+ (1)) x) y) === (bigger x y)"},Lemma {lemmaName = "lemma15", lemmaSource = Nothing, hLemmas = ["lemma13","lemma15"], indVar = Nothing, formula = "\n  (bigger (cons (x P.+ x) y) (0)) ===\n    (bigger (cons x (cons x y)) (0))"},Lemma {lemmaName = "lemma14", lemmaSource = Nothing, hLemmas = ["lemma14"], indVar = Nothing, formula = " (bigger (cons y x) (y P.+ (1))) === P.False"},Lemma {lemmaName = "lemma13", lemmaSource = Nothing, hLemmas = ["lemma13"], indVar = Nothing, formula = "\n  (bigger (cons x (cons x y)) z) === (bigger (cons x y) z)"},Lemma {lemmaName = "lemma12", lemmaSource = Nothing, hLemmas = ["lemma12","lemma8"], indVar = Nothing, formula = " (bigger (cons x (cons z y)) z) === P.False"},Lemma {lemmaName = "lemma11", lemmaSource = Nothing, hLemmas = ["lemma11"], indVar = Nothing, formula = " (bigger (cons (1) x) (0)) === (bigger x (0))"},Lemma {lemmaName = "lemma10", lemmaSource = Nothing, hLemmas = ["lemma10"], indVar = Nothing, formula = " (bigger (cons (0) x) (1)) === P.False"},Lemma {lemmaName = "lemma9", lemmaSource = Nothing, hLemmas = ["lemma9"], indVar = Nothing, formula = "\n  (bigger (cons x (nil :: list P.Int)) y) === (x P.> y)"},Lemma {lemmaName = "lemma8", lemmaSource = Nothing, hLemmas = ["lemma8"], indVar = Nothing, formula = " (bigger (cons y x) y) === P.False"},Lemma {lemmaName = "lemma7", lemmaSource = Nothing, hLemmas = ["lemma7"], indVar = Nothing, formula = " (bigger (nil :: list P.Int) x) === P.True"},Lemma {lemmaName = "lemma6", lemmaSource = Nothing, hLemmas = ["lemma6"], indVar = Nothing, formula = " (cons y (z ++ x2)) === ((cons y z) ++ x2)"},Lemma {lemmaName = "lemma4", lemmaSource = Nothing, hLemmas = ["lemma4"], indVar = Nothing, formula = " ((nil :: list x) ++ y) === y"}])