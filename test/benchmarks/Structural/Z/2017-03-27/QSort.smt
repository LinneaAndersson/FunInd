("693.567477s",[Lemma {lemmaName = "lemma59", lemmaSource = Nothing, hLemmas = ["lemma59"], indVar = Nothing, formula = "\n  (ordered (cons x (cons x y))) === (ordered (cons x y))"},Lemma {lemmaName = "lemma58", lemmaSource = Nothing, hLemmas = ["lemma58"], indVar = Nothing, formula = "\n  (ordered (cons x (nil :: list P.Int))) ===\n    (ordered (nil :: list P.Int))"},Lemma {lemmaName = "lemma47", lemmaSource = Nothing, hLemmas = ["lemma47"], indVar = Nothing, formula = "\n  (qsort (cons x (nil :: list P.Int))) ===\n    (cons x (nil :: list P.Int))"},Lemma {lemmaName = "lemma43", lemmaSource = Nothing, hLemmas = ["lemma43"], indVar = Nothing, formula = " (qsort (nil :: list P.Int)) === (nil :: list P.Int)"},Lemma {lemmaName = "lemma42", lemmaSource = Nothing, hLemmas = ["lemma42"], indVar = Nothing, formula = "\n  (filterLEq (0) (cons (x P.+ x) (nil :: list P.Int))) ===\n    (filterLEq x (cons (x P.+ x) (nil :: list P.Int)))"},Lemma {lemmaName = "lemma40", lemmaSource = Nothing, hLemmas = ["lemma40"], indVar = Nothing, formula = "\n  (filterLEq (x P.+ x) (cons (0) (nil :: list P.Int))) ===\n    (filterLEq x (cons (0) (nil :: list P.Int)))"},Lemma {lemmaName = "lemma39", lemmaSource = Nothing, hLemmas = ["lemma39"], indVar = Nothing, formula = "\n  (filterLEq x (filterLEq y (cons y z))) ===\n    (filterLEq x (cons y (filterLEq y z)))"},Lemma {lemmaName = "lemma38", lemmaSource = Nothing, hLemmas = ["lemma38"], indVar = Nothing, formula = "\n  (filterLEq x (filterLEq y (cons y z))) ===\n    (filterLEq x (cons y (filterLEq y z)))"},Lemma {lemmaName = "lemma34", lemmaSource = Nothing, hLemmas = ["lemma34"], indVar = Nothing, formula = "\n  (filterLEq x (cons x y)) === (cons x (filterLEq x y))"},Lemma {lemmaName = "lemma33", lemmaSource = Nothing, hLemmas = ["lemma33"], indVar = Nothing, formula = "\n  (filterLEq x (nil :: list P.Int)) === (nil :: list P.Int)"},Lemma {lemmaName = "lemma31", lemmaSource = Nothing, hLemmas = ["lemma31"], indVar = Nothing, formula = "\n  (filterGT (x P.+ x) (cons (0) (nil :: list P.Int))) ===\n    (filterGT x (cons (0) (nil :: list P.Int)))"},Lemma {lemmaName = "lemma30", lemmaSource = Nothing, hLemmas = ["lemma30"], indVar = Nothing, formula = "\n  (filterGT x (filterGT y (cons x z))) ===\n    (filterGT x (cons x (filterGT y z)))"},Lemma {lemmaName = "lemma28", lemmaSource = Nothing, hLemmas = ["lemma28","lemma25"], indVar = Nothing, formula = "\n  (filterGT x (cons y (cons x z))) === (filterGT x (cons y z))"},Lemma {lemmaName = "lemma25", lemmaSource = Nothing, hLemmas = ["lemma25"], indVar = Nothing, formula = " (filterGT x (cons x y)) === (filterGT x y)"},Lemma {lemmaName = "lemma24", lemmaSource = Nothing, hLemmas = ["lemma24"], indVar = Nothing, formula = "\n  (filterGT x (nil :: list P.Int)) === (nil :: list P.Int)"},Lemma {lemmaName = "lemma23", lemmaSource = Nothing, hLemmas = ["lemma23"], indVar = Nothing, formula = "\n  (count (x P.+ x) (cons (0) y)) === (count (x P.+ x) (cons x y))"},Lemma {lemmaName = "lemma22", lemmaSource = Nothing, hLemmas = ["lemma22"], indVar = Nothing, formula = "\n  (count (0) (cons (x P.+ x) y)) === (count (0) (cons x y))"},Lemma {lemmaName = "lemma21", lemmaSource = Nothing, hLemmas = ["lemma21","lemma16","lemma19"], indVar = Nothing, formula = "\n  (count x (cons (y P.+ x) (nil :: list P.Int))) ===\n    (count y (cons (0) (nil :: list P.Int)))"},Lemma {lemmaName = "lemma19", lemmaSource = Nothing, hLemmas = ["lemma19"], indVar = Nothing, formula = "\n  (count x (cons (x P.+ x) y)) === (count x (cons (0) y))"},Lemma {lemmaName = "lemma16", lemmaSource = Nothing, hLemmas = ["lemma16","lemma13"], indVar = Nothing, formula = "\n  (count y (cons x (nil :: list P.Int))) ===\n    (count x (cons y (nil :: list P.Int)))"},Lemma {lemmaName = "lemma15", lemmaSource = Nothing, hLemmas = ["lemma15"], indVar = Nothing, formula = " (count (1) (cons (0) x)) === (count (1) x)"},Lemma {lemmaName = "lemma14", lemmaSource = Nothing, hLemmas = ["lemma14"], indVar = Nothing, formula = " (count (0) (cons (1) x)) === (count (0) x)"},Lemma {lemmaName = "lemma13", lemmaSource = Nothing, hLemmas = ["lemma13"], indVar = Nothing, formula = " ((1) P.+ (count x y)) === (count x (cons x y))"},Lemma {lemmaName = "lemma10", lemmaSource = Nothing, hLemmas = ["lemma10"], indVar = Nothing, formula = " (count x (nil :: list P.Int)) === (0)"},Lemma {lemmaName = "lemma9", lemmaSource = Nothing, hLemmas = ["lemma9"], indVar = Nothing, formula = " (cons y (z ++ x2)) === ((cons y z) ++ x2)"},Lemma {lemmaName = "lemma7", lemmaSource = Nothing, hLemmas = ["lemma7"], indVar = Nothing, formula = " ((nil :: list x) ++ y) === y"},Lemma {lemmaName = "lemma2", lemmaSource = Just "Sort.p_tmpNil", hLemmas = ["lemma2"], indVar = Nothing, formula = "\n  (count y (nil :: list P.Int)) ===\n    (count y (qsort (nil :: list P.Int)))"}])