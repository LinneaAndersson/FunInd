(declare-datatypes ()
  ((Nat :source Int.Nat (Z :source Int.Z)
     (S :source Int.S (proj1-S Nat)))))
(define-fun-rec
  p :keep :source Int.p
    ((x Nat) (y Nat)) Nat
    (match x
      (case Z y)
      (case (S a) (S (p a y)))))
(assert-not
  :source Int.prop_a_1
  (forall ((a Nat) (b Nat) (x Nat))
    (=> (= (p a (p b x)) (p (p a b) x))
      (= (p (S a) (p b x)) (p (p (S a) b) x)))))
(assert-not
  :speculated-lemma
  (forall ((x Nat)) (= (p x Z) x)))
(assert-not
  :speculated-lemma
  (forall ((x Nat)) (= (p Z x) x)))
(assert-not
  :speculated-lemma
  (forall ((x Nat) (y Nat)) (= (p y x) (p x y))))
(assert-not
  :speculated-lemma
  (forall ((x Nat) (y Nat)) (= (p (S x) y) (p x (S y)))))
(assert-not
  :speculated-lemma
  (forall ((x Nat) (y Nat)) (= (S (p x y)) (p x (S y)))))
(assert-not
  :speculated-lemma
  (forall ((x Nat) (y Nat)) (= (= x (p y x)) (= y Z))))
(assert-not
  :speculated-lemma
  (forall ((x Nat) (y Nat) (z Nat)) (= (p (p x y) z) (p x (p y z)))))
(assert-not
  :speculated-lemma
  (forall ((x Nat)) (= (= Z (p x x)) (= x Z))))
(assert-not
  :speculated-lemma
  (forall ((x Nat) (y Nat)) (= (= (p y x) (S x)) (= y (S Z)))))
(assert-not
  :speculated-lemma
  (forall ((x Nat)) (= (= (p x x) (S Z)) (= x (S x)))))
(assert-not
  :speculated-lemma
  (forall ((x Nat) (y Nat) (z Nat)) (= (= (p y x) (p z x)) (= y z))))
(assert-not
  :speculated-lemma
  (forall ((x Nat) (y Nat)) (= (= (p x x) (p y y)) (= x y))))
(assert-not
  :speculated-lemma
  (forall ((x Nat) (y Nat)) (= (= Z (p x (p x y))) (= Z (p x y)))))
(check-sat)
